{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","cate","type","value","onChange","target","getGifs","category","a","api","encodeURI","fetch","peticion","json","catch","console","warn","data","gifs","map","img","id","title","image","images","downsized","url","GifGridItem","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","cargarData","useFetchGifs","imgs","gif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sLAIaA,EAAc,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,cAAoB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAqB7C,OACI,uBAAMC,SAZU,SAACC,GAEjBA,EAAEC,iBAImB,IAArBJ,EAAWK,QACXP,GAAc,SAAAQ,GAAI,MAAI,CAACN,OAKvB,UACA,6BAAKA,IACD,uBACAO,KAAM,OACNC,MAASR,EACTS,SAvBkB,SAACN,GAEvBF,EAAcE,EAAEO,OAAOF,c,8BCVlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAKbC,EALa,iDAKmCC,UAAWH,GAL9C,+DAMII,MAAMF,GANV,cAMbG,EANa,gBAOEA,EAASC,OAAOC,MAAMC,QAAQC,MAPhC,uBAObC,EAPa,EAObA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,MAAOH,EAAII,OAAOC,UAAUC,QAbhB,kBAkBdR,GAlBc,4CAAH,sDCEPS,EAAc,SAAC,GAAsB,IAArBN,EAAoB,EAApBA,GAAGC,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,MAGlC,OAFDR,QAAQa,IAAIP,EAAGC,EAAMC,GAGhB,sBAAKM,UAAW,2DAAhB,UACI,qBAAKC,IAAMP,EAAOQ,IAAMT,IACxB,4BAAIA,QCCHU,EAAW,SAAC,GAAgB,IAAfzB,EAAc,EAAdA,SAAc,ECNZ,SAACA,GAAc,IAAD,EAEZb,mBAAS,CAC/BuB,KAAO,GACPgB,SAAQ,IAJ0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAmBtC,OAbAC,qBAAU,WACN9B,EAAQC,GACP8B,MAAK,SAAAC,GAEEH,EAAS,CACLlB,KAAOqB,EACPL,SAAQ,SAItB,CAAC1B,IAGI2B,EDTiBK,CAAahC,GAA5BiC,EAJ2B,EAIhCvB,KAAUgB,EAJsB,EAItBA,QAmBd,OAEI,qCACA,6BAAK1B,IAGL0B,GAAW,mBAAGJ,UAAW,sEAAd,qBAEZ,qBAAKA,UAAY,YAAjB,SAGYW,EAAKrB,KAAK,SAAAsB,GAAG,OAEZ,cAAC,EAAD,eAEUA,GADCA,EAAIpB,aE3CtBqB,EAAe,WAAI,MAEIhD,mBAAS,CAAC,KAFd,mBAEzBiD,EAFyB,KAEblD,EAFa,KAa5B,OAEI,qCACA,8CAGA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQkD,EAAWxB,KAAI,SAAAZ,GAAQ,OAEnB,cAAC,EAAD,CAEAA,SAAYA,GADNA,Y,MCxB1BqC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.c576dcab.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n/* import { GifExpertApp } from '../GifExpertApp';\r\n */\r\nexport const AddCategory = ({setCategories }) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e)=> {\r\n\r\n        setInputValue(e.target.value)\r\n        /* console.log(e.target.value); */\r\n    }\r\n\r\n    const handleSubmit =(e)=>{\r\n        /*esto se enacarga que no se refresque la pagina */\r\n        e.preventDefault();\r\n        \r\n        /* console.log('Submite realizado'); */\r\n        /* operador ternario omite else */\r\n        inputValue.trim() != '' &&\r\n        setCategories(cate => [inputValue,/* ...cate */]);\r\n        \r\n    }\r\n    \r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n        <h1>{inputValue}</h1>\r\n            <input\r\n            type= \"text\"\r\n            value = {inputValue}\r\n            onChange ={handleInputChange}\r\n            \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}\r\n","export const getGifs = async ( category) =>{\r\n\r\n       \r\n    /* recuerda poner el https:// esto es requerido cuando se unsa el fetch\r\n    javaDcript tiene una propiedad reemplaza los espacion   */\r\n    const api = `https://api.giphy.com/v1/gifs/search?q=${encodeURI (category)}&api_key=hcQQUOLXC2okXggXUXMeWlr2hd5WXq97&limit=20`;\r\n    const peticion = await fetch(api);\r\n   const {data} =  await peticion.json().catch(console.warn);\r\n   \r\n   const gifs = data.map(img =>{\r\n       return{\r\n           id: img.id,\r\n           title: img.title,\r\n           image: img.images.downsized.url,              \r\n       }        \r\n   })\r\n   /* console.log(gifs); */\r\n/* esto resuleve una promesa */\r\n  return gifs;\r\n   \r\n   /* console.log(data); */\r\n   /* para poder obtener de un arreglo las propiedades de una api\r\n   se barren y se obitine las popiedades que se necesutan con map */\r\n\r\n   \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,image}) => {\r\n   console.log(id,title,image);\r\n   \r\n    return (\r\n        <div className =\"card animate__animated animate__backInDown animate__fast\">\r\n            <img src ={image} alt ={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n/*\r\nesto no se va autilizar aqui pero en hoocks/useFetch si\r\n import { getGifs } from '../helpers/getGifs';\r\n\r\n */\r\nexport const GifGrid =  ({category}) => {\r\n\r\n//    const [images, setimages] = useState([])\r\n/* se puede renombrar un objeto con : */\r\n const {data:imgs,loading} =useFetchGifs(category);\r\n\r\n/*  console.log(data); */\r\n \r\n//     useEffect( () => {\r\n//         /* utilizados la funcion a utlizar  */\r\n//        getGifs(category)\r\n//        .then(setimages);\r\n//    } /* se manda un arreglo de dependencias si se pone [] quiere decir que se dispara solo una vez */\r\n//    ,[category])\r\n\r\n    \r\n    /* hay que tener en cuenta cunado se usan hocks porque \r\n    cada ves que se esta utilizando este esta realizando la peticion https\r\n    esta volviendo a ejecutar todo el codigo \r\n     para resolver esto y evitar los ciclo infinitos se utliza {useEffect}:\r\n     que me permite ejecutar el codigo de manera condicional\r\n    */\r\n    /* getGifs();    */\r\n    return (\r\n\r\n        <>\r\n        <h3>{category}</h3>\r\n\r\n       {/*  {loading ? 'cargando':'Data ok'} */}\r\n       {loading && <p className =\"animate__animated animate__flash animate__repeat-3 animate__fadeOut\">Loading</p>}\r\n\r\n       <div className = \"card-grid\">\r\n            \r\n                {\r\n                   imgs.map( gif =>(\r\n\r\n                    <GifGridItem\r\n                        key = {gif.id}\r\n                         {... gif}\r\n                    />\r\n                       \r\n                   ))\r\n                }         \r\n            </div> \r\n            {/* <div className = \"card-grid\">\r\n            \r\n                {\r\n                   images.map( gif =>(\r\n\r\n                    <GifGridItem\r\n                        key = {gif.id}\r\n                         {... gif}\r\n                    />\r\n                       \r\n                   ))\r\n                }         \r\n            </div> */}\r\n        </>\r\n        \r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setstate] = useState({\r\n        data : [],\r\n        loading:true\r\n    });\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then(cargarData =>{\r\n            \r\n                setstate({\r\n                    data : cargarData,\r\n                    loading:false\r\n                });\r\n            \r\n        })\r\n    },[category])\r\n    /*  */\r\n\r\n    return state;\r\n}\r\n","import React,{useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nexport const GifExpertApp = ()=>{\r\n/*     const categories = ['One Punch', 'Piratas del Caribe','dragon ball'];*/  \r\nconst [categories, setCategories] = useState(['']);\r\n\r\n//const handleAdd = ()=>{   \r\n\r\n    //setCategories(\r\n        /* ...categories,'hunter */\r\n\r\n      //  categoria =>[...categoria, 'Naruto']\r\n\r\n    //);\r\n//}\r\n    return (\r\n\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        {/* de esta manera manod la referencia del manejador de categories \r\n        que es el setCategories */}\r\n        <AddCategory setCategories ={setCategories} />\r\n        <hr/>\r\n         {/* <button onClick={handleAdd}>agregar</button>  */}\r\n        <ol>\r\n            {\r\n                categories.map(category=>(\r\n\r\n                    <GifGrid \r\n                    key= {category}\r\n                    category = {category}\r\n                    />\r\n                ))\r\n                   \r\n                 /* <li key = {category}>{category}</li> */\r\n            }\r\n        </ol>\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n//componente GifExpertApp\n//<h2\n"],"sourceRoot":""}